/*
 * Generated by gdbus-codegen 2.34.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __E_DBUS_SOURCE_MANAGER_H__
#define __E_DBUS_SOURCE_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.SourceManager */

#define E_DBUS_TYPE_SOURCE_MANAGER (e_dbus_source_manager_get_type ())
#define E_DBUS_SOURCE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_SOURCE_MANAGER, EDBusSourceManager))
#define E_DBUS_IS_SOURCE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_SOURCE_MANAGER))
#define E_DBUS_SOURCE_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), E_DBUS_TYPE_SOURCE_MANAGER, EDBusSourceManagerIface))

struct _EDBusSourceManager;
typedef struct _EDBusSourceManager EDBusSourceManager;
typedef struct _EDBusSourceManagerIface EDBusSourceManagerIface;

struct _EDBusSourceManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_authenticate) (
    EDBusSourceManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uid,
    const gchar *arg_prompt_title,
    const gchar *arg_prompt_message,
    const gchar *arg_prompt_description);

  gboolean (*handle_create_sources) (
    EDBusSourceManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_array);

  gboolean (*handle_reload) (
    EDBusSourceManager *object,
    GDBusMethodInvocation *invocation);

};

GType e_dbus_source_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *e_dbus_source_manager_interface_info (void);
guint e_dbus_source_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void e_dbus_source_manager_complete_authenticate (
    EDBusSourceManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);

void e_dbus_source_manager_complete_create_sources (
    EDBusSourceManager *object,
    GDBusMethodInvocation *invocation);

void e_dbus_source_manager_complete_reload (
    EDBusSourceManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void e_dbus_source_manager_call_authenticate (
    EDBusSourceManager *proxy,
    const gchar *arg_uid,
    const gchar *arg_prompt_title,
    const gchar *arg_prompt_message,
    const gchar *arg_prompt_description,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_source_manager_call_authenticate_finish (
    EDBusSourceManager *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_source_manager_call_authenticate_sync (
    EDBusSourceManager *proxy,
    const gchar *arg_uid,
    const gchar *arg_prompt_title,
    const gchar *arg_prompt_message,
    const gchar *arg_prompt_description,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);

void e_dbus_source_manager_call_create_sources (
    EDBusSourceManager *proxy,
    GVariant *arg_array,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_source_manager_call_create_sources_finish (
    EDBusSourceManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_source_manager_call_create_sources_sync (
    EDBusSourceManager *proxy,
    GVariant *arg_array,
    GCancellable *cancellable,
    GError **error);

void e_dbus_source_manager_call_reload (
    EDBusSourceManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_source_manager_call_reload_finish (
    EDBusSourceManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_source_manager_call_reload_sync (
    EDBusSourceManager *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define E_DBUS_TYPE_SOURCE_MANAGER_PROXY (e_dbus_source_manager_proxy_get_type ())
#define E_DBUS_SOURCE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_SOURCE_MANAGER_PROXY, EDBusSourceManagerProxy))
#define E_DBUS_SOURCE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_TYPE_SOURCE_MANAGER_PROXY, EDBusSourceManagerProxyClass))
#define E_DBUS_SOURCE_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_TYPE_SOURCE_MANAGER_PROXY, EDBusSourceManagerProxyClass))
#define E_DBUS_IS_SOURCE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_SOURCE_MANAGER_PROXY))
#define E_DBUS_IS_SOURCE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_TYPE_SOURCE_MANAGER_PROXY))

typedef struct _EDBusSourceManagerProxy EDBusSourceManagerProxy;
typedef struct _EDBusSourceManagerProxyClass EDBusSourceManagerProxyClass;
typedef struct _EDBusSourceManagerProxyPrivate EDBusSourceManagerProxyPrivate;

struct _EDBusSourceManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  EDBusSourceManagerProxyPrivate *priv;
};

struct _EDBusSourceManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType e_dbus_source_manager_proxy_get_type (void) G_GNUC_CONST;

void e_dbus_source_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusSourceManager *e_dbus_source_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusSourceManager *e_dbus_source_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void e_dbus_source_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusSourceManager *e_dbus_source_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusSourceManager *e_dbus_source_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define E_DBUS_TYPE_SOURCE_MANAGER_SKELETON (e_dbus_source_manager_skeleton_get_type ())
#define E_DBUS_SOURCE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_SOURCE_MANAGER_SKELETON, EDBusSourceManagerSkeleton))
#define E_DBUS_SOURCE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_TYPE_SOURCE_MANAGER_SKELETON, EDBusSourceManagerSkeletonClass))
#define E_DBUS_SOURCE_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_TYPE_SOURCE_MANAGER_SKELETON, EDBusSourceManagerSkeletonClass))
#define E_DBUS_IS_SOURCE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_SOURCE_MANAGER_SKELETON))
#define E_DBUS_IS_SOURCE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_TYPE_SOURCE_MANAGER_SKELETON))

typedef struct _EDBusSourceManagerSkeleton EDBusSourceManagerSkeleton;
typedef struct _EDBusSourceManagerSkeletonClass EDBusSourceManagerSkeletonClass;
typedef struct _EDBusSourceManagerSkeletonPrivate EDBusSourceManagerSkeletonPrivate;

struct _EDBusSourceManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  EDBusSourceManagerSkeletonPrivate *priv;
};

struct _EDBusSourceManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType e_dbus_source_manager_skeleton_get_type (void) G_GNUC_CONST;

EDBusSourceManager *e_dbus_source_manager_skeleton_new (void);


G_END_DECLS

#endif /* __E_DBUS_SOURCE_MANAGER_H__ */
